#!/bin/zsh

# 1. Configurar un PATH completo para asegurar que todos los comandos se encuentren.
# Se prioriza la ruta de Homebrew para Git para sistemas Apple Silicon.
export PATH="/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH"

PROJECT_PATH="/Users/paolazapatagonzalez/Downloads/Paola/LifeFile/Projects/vueJs/vue-gamestream"
PROJECT_NAME="vue-gamestream"

# Aseg√∫rate de que el script cambie al directorio del proyecto antes de ejecutar cualquier comando Git
cd "$PROJECT_PATH" || { echo "‚ùå No se pudo entrar a la carpeta del proyecto. Abortando." >&2; exit 1 }

echo "üöÄ Iniciando proyecto $PROJECT_NAME..."

if [[ "$PROJECT_PATH" == *"/Downloads/"* ]]; then
  echo "‚ö† Est√°s trabajando desde la carpeta Downloads. Puede que Sublime solicite permisos."
fi

# --- Flujo de Git ---

# Preguntar si el usuario quiere verificar la sincronizaci√≥n de ramas
SHOULD_CHECK_SYNC=$(osascript -e 'display dialog "Quieres verificar la sincronizaci√≥n de ramas de Git?" buttons {"No", "S√≠"} default button "S√≠" with icon caution' -e 'button returned of result')

if [[ "$SHOULD_CHECK_SYNC" == "S√≠" ]]; then
  # Solicitar la primera rama
  RAMA1=$(osascript -e 'try' -e '    set T to text returned of (display dialog "Ingresa el nombre de la PRIMERA rama para verificar:" default answer "main")' -e '    return T' -e 'on error number -128' -e '    return ""' -e 'end try')

  # Solicitar la segunda rama
  RAMA2=$(osascript -e 'try' -e '    set T to text returned of (display dialog "Ingresa el nombre de la SEGUNDA rama para verificar:" default answer "dev")' -e '    return T' -e 'on error number -128' -e '    return ""' -e 'end try')

  # Comprobar si el usuario cancel√≥ alguno de los di√°logos (o dej√≥ vac√≠o)
  if [ -z "$RAMA1" ] || [ -z "$RAMA2" ]; then
    echo "‚ùå Nombres de ramas no proporcionados para la verificaci√≥n. Saltando la verificaci√≥n de Git."
  else
    # Verifica si git-check-sync existe antes de intentar usarlo
    if command -v git-check-sync &> /dev/null; then
      echo "üîç Verificando sincronizaci√≥n de ramas ($RAMA1 vs $RAMA2)..."
      git-check-sync "$RAMA1" "$RAMA2"
      echo "‚úÖ Verificaci√≥n de Git completada."
    else
      echo "‚ùå La funci√≥n 'git-check-sync' no est√° disponible. Saltando la verificaci√≥n de Git."
    fi
  fi
else
  echo "‚è© Saltando la verificaci√≥n de sincronizaci√≥n de ramas."
fi

---

# Preguntar si el usuario quiere actualizar una rama desde la principal
SHOULD_UPDATE_BRANCH=$(osascript -e 'display dialog "Quieres actualizar una rama desde la principal (merge, commit y push)?" buttons {"No", "S√≠"} default button "No" with icon caution' -e 'button returned of result')

if [[ "$SHOULD_UPDATE_BRANCH" == "S√≠" ]]; then
  # >>> MODIFICACI√ìN CLAVE AQU√ç: Solicitar los par√°metros para git_update.sh con osascript <<<
  MAIN_BRANCH_FOR_UPDATE=$(osascript -e 'try' -e '    set T to text returned of (display dialog "Ingresa la rama principal para la actualizaci√≥n (ej: main):" default answer "main")' -e '    return T' -e 'on error number -128' -e '    return ""' -e 'end try')

  TARGET_BRANCH_FOR_UPDATE=$(osascript -e 'try' -e '    set T to text returned of (display dialog "Ingresa la rama a actualizar (ej: develop):" default answer "dev")' -e '    return T' -e 'on error number -128' -e '    return ""' -e 'end try')

  UNTRACKED_COMMIT_MSG=$(osascript -e 'try' -e '    set T to text returned of (display dialog "Mensaje para commit de archivos nuevos/sin seguimiento (si aplica):" default answer "feat: (automated) Add untracked files")' -e '    return T' -e 'on error number -128' -e '    return ""' -e 'end try')

  LOCAL_COMMIT_MSG=$(osascript -e 'try' -e '    set T to text returned of (display dialog "Mensaje para commit de cambios locales (si aplica):" default answer "feat: (automated) WIP changes before merge")' -e '    return T' -e 'on error number -128' -e '    return ""' -e 'end try')

  # Aseg√∫rate de que los par√°metros obligatorios no est√©n vac√≠os si el usuario cancel√≥
  if [ -z "$MAIN_BRANCH_FOR_UPDATE" ] || [ -z "$TARGET_BRANCH_FOR_UPDATE" ]; then
      echo "‚ùå Nombres de ramas no proporcionados para la actualizaci√≥n. Saltando la actualizaci√≥n de Git."
  else
      # Ruta al script git_update.sh
      GIT_UPDATE_SCRIPT="$PROJECT_PATH/git_update.sh"

      if [ -f "$GIT_UPDATE_SCRIPT" ]; then
        echo "üîÑ Ejecutando script de actualizaci√≥n de rama: '$GIT_UPDATE_SCRIPT'..."
        # Pasa los par√°metros como argumentos al script
        # Redirige la salida est√°ndar y de error a un archivo log temporal para depuraci√≥n
        "$GIT_UPDATE_SCRIPT" "$MAIN_BRANCH_FOR_UPDATE" "$TARGET_BRANCH_FOR_UPDATE" "$UNTRACKED_COMMIT_MSG" "$LOCAL_COMMIT_MSG" > "/tmp/git_update_debug_$(date +%Y%m%d_%H%M%S).log" 2>&1
        # Muestra el contenido del log en la salida de Automator
        cat "/tmp/git_update_debug_$(date +%Y%m%d_%H%M%S).log"

        if [ $? -eq 0 ]; then
          echo "‚úÖ Actualizaci√≥n de rama completada. Revisa la salida del script y el log para detalles."
        else
          echo "‚ùå El script de actualizaci√≥n de rama termin√≥ con errores. Revisa la salida de Automator y el archivo de log."
        fi
      else
        echo "‚ùå Error: El script 'git_update.sh' no se encontr√≥ en '$GIT_UPDATE_SCRIPT'."
        echo "Aseg√∫rate de que el archivo exista y est√© en la ubicaci√≥n correcta."
      fi
  fi
else
  echo "‚è© Saltando la actualizaci√≥n de ramas."
fi

---

# Preguntar si el usuario quiere hacer un commit y push (el commit/push general del proyecto)
SHOULD_COMMIT=$(osascript -e 'display dialog "Quieres hacer un commit y push ahora?" buttons {"No", "S√≠"} default button "No" with icon caution' -e 'button returned of result')

if [[ "$SHO_COMMIT" == "S√≠" ]]; then
  # Solicitar el mensaje del commit
  COMMIT_MSG=$(osascript -e 'try' -e '    set T to text returned of (display dialog "Ingresa el mensaje para el commit:" default answer "feat: (automated) Initial setup")' -e '    return T' -e 'on error number -128' -e '    return ""' -e 'end try')

  # Solicitar la rama para hacer push
  CURRENT_BRANCH=$(git branch --show-current 2>/dev/null) # Intenta obtener la rama actual
  if [ -z "$CURRENT_BRANCH" ]; then
      CURRENT_BRANCH="main" # Valor por defecto si no se puede obtener la rama actual
  fi
  # Manejo robusto de la rama por defecto para AppleScript
  PUSH_BRANCH=$(osascript -e 'on run argv' -e 'set defaultBranch to item 1 of argv' -e 'try' -e '    set T to text returned of (display dialog "Ingresa la rama a la que deseas hacer push:" default answer defaultBranch)' -e '    return T' -e 'on error number -128' -e '    return ""' -e 'end try' -- "$CURRENT_BRANCH")

  # Comprobar si el usuario cancel√≥ los di√°logos
  if [ -z "$COMMIT_MSG" ] || [ -z "$PUSH_BRANCH" ]; then
    echo "‚ùå Mensaje de commit o rama de push no proporcionados. Saltando el commit y push."
  else
    # Verifica si git-commit-and-push existe antes de intentar usarlo
    if command -v git-commit-and-push &> /dev/null; then
      echo "üì¶ Realizando commit y push..."
      git-commit-and-push "$COMMIT_MSG" "$PUSH_BRANCH"
    else
      echo "‚ùå La funci√≥n 'git-commit-and-push' no est√° disponible. Saltando el commit y push."
    fi
  fi
else
  echo "‚è© Saltando el commit y push de Git."
fi

echo "--- Continuando con el proyecto ---"

# Abrir Sublime Text usando 'open -a' si 'subl' no funciona directamente.
if ! command -v subl &> /dev/null; then
  echo "‚ùå 'subl' no est√° disponible directamente. Intentando abrir Sublime Text con 'open -a'."
  open -a "Sublime Text" "$PROJECT_PATH" &
else
  echo "üìù Abriendo en Sublime Text usando 'subl'..."
  subl "$PROJECT_PATH" &
fi

sleep 2 # Peque√±a pausa para permitir que Sublime se inicie

echo "üì¶ Ejecutando 'npm run dev'..."
# Captura la salida de npm en un archivo de log para luego buscar la URL
npm run dev > "$PROJECT_PATH/npm_output.log" 2>&1 &
NPM_PID=$! # Guarda el PID de npm para poder matarlo si es necesario

echo "Esperando la URL local..."
URL_FOUND=false
TIMEOUT=60 # Esperar hasta 60 segundos por la URL

for i in $(seq 1 $TIMEOUT); do
  if grep -q "Local:" "$PROJECT_PATH/npm_output.log"; then
    url=$(grep "Local:" "$PROJECT_PATH/npm_output.log" | grep -o 'http://[^ ]*' | head -1)
    if [[ -n "$url" ]]; then
      echo "üåê Abriendo navegador en $url"
      open "$url"
      URL_FOUND=true
      break
    fi
  fi
  sleep 1
done

if [ "$URL_FOUND" = false ]; then
  echo "‚ùå No se encontr√≥ la URL local despu√©s de $TIMEOUT segundos. Revisa $PROJECT_PATH/npm_output.log para errores."
fi

echo "Script finalizado. El servidor de desarrollo Vue deber√≠a estar ejecut√°ndose."